# Re-run the original code after installing the package
import swisseph as swe
import datetime
from collections import OrderedDict
import pandas as pd
from IPython.display import display, HTML

# Your existing data structures
nakshatras = [
    "Ashwini", "Bharani", "Krittika", "Rohini", "Mrigashira", "Ardra",
    "Punarvasu", "Pushya", "Ashlesha", "Magha", "Purva Phalguni", "Uttara Phalguni",
    "Hasta", "Chitra", "Swati", "Vishakha", "Anuradha", "Jyeshtha",
    "Mula", "Purva Ashadha", "Uttara Ashadha", "Shravana", "Dhanishta", "Shatabhisha",
    "Purva Bhadrapada", "Uttara Bhadrapada", "Revati"
]

rasis = [
    "Mesha", "Rishaba", "Mithuna", "Kataka", "Simha", "Kanni",
    "Thula", "Vrischika", "Dhanus", "Makara", "Kumbha", "Meena"
]

# Nakshatra lords mapping
nakshatra_lords = [
    "Ketu", "Venus", "Sun", "Moon", "Mars", "Rahu",
    "Jupiter", "Saturn", "Mercury"
] * 3

# Rasi lords mapping
rasi_lords = {
    "Mesha": "Mars", "Rishaba": "Venus", "Mithuna": "Mercury", "Kataka": "Moon",
    "Simha": "Sun", "Kanni": "Mercury", "Thula": "Venus", "Vrischika": "Mars",
    "Dhanus": "Jupiter", "Makara": "Saturn", "Kumbha": "Saturn", "Meena": "Jupiter"
}

swe.set_ephe_path('.')
swe.set_sid_mode(swe.SIDM_LAHIRI)

def get_chart_info(longitude, speed=None):
    return {
        'longitude': longitude,
        'retrograde': speed < 0 if speed is not None else None,
        'rasi': rasis[int(longitude // 30)],
        'nakshatra': nakshatras[int((longitude % 360) // (360 / 27))],
        'pada': int(((longitude % (360 / 27)) / (360 / 27 / 4)) + 1)
    }

def get_house_from_longitude(longitude, asc_deg):
    lagna_rasi = int(asc_deg // 30)
    planet_rasi = int(longitude // 30)
    house = (planet_rasi - lagna_rasi) % 12 + 1
    return house

def get_planet_positions(jd, lat, lon):
    flags = swe.FLG_SIDEREAL | swe.FLG_SPEED
    results = {}
    swe.set_topo(lon, lat, 0)

    # Get regular planets
    for pid in range(10):
        name = swe.get_planet_name(pid)
        lonlat = swe.calc_ut(jd, pid, flags)[0]
        results[name] = get_chart_info(lonlat[0], lonlat[3])

    # Get Rahu and Ketu
    rahu = swe.calc_ut(jd, swe.TRUE_NODE, flags)[0]
    results['Rahu'] = get_chart_info(rahu[0], rahu[3])
    ketu_lon = (rahu[0] + 180.0) % 360.0
    ketu_info = get_chart_info(ketu_lon, rahu[3])
    ketu_info['retrograde'] = True
    results['Ketu'] = ketu_info

    # Get Ascendant
    cusps, ascmc = swe.houses_ex(jd, lat, lon, b'O', flags=flags)
    results['Ascendant'] = get_chart_info(ascmc[0])

    return results, ascmc[0], cusps

def get_nakshatra_lord(nakshatra_name):
    """Get the lord of a nakshatra"""
    if nakshatra_name in nakshatras:
        index = nakshatras.index(nakshatra_name)
        return nakshatra_lords[index]
    return None

def get_planets_in_rasi(planet_data, target_rasi):
    """Get all planets placed in a specific rasi"""
    planets_in_rasi = []
    for planet, info in planet_data.items():
        if planet != 'Ascendant' and info['rasi'] == target_rasi:
            planets_in_rasi.append(planet)
    return planets_in_rasi

def get_planets_in_house(planet_data, asc_deg, house_number):
    """Get all planets placed in a specific house"""
    planets_in_house = []
    for planet, info in planet_data.items():
        if planet != 'Ascendant':
            planet_house = get_house_from_longitude(info['longitude'], asc_deg)
            if planet_house == house_number:
                planets_in_house.append(planet)
    return planets_in_house

def life_partner_prediction(male_chart_data, female_chart_data, male_asc, female_asc):
    """
    Main function for life partner prediction based on Rahu-Ketu compatibility
    """
    # Extract male Rahu and Ketu details
    male_rahu = male_chart_data['Rahu']
    male_ketu = male_chart_data['Ketu']

    # Get Nakshatra lords for Rahu and Ketu
    rahu_nakshatra_lord = get_nakshatra_lord(male_rahu['nakshatra'])
    ketu_nakshatra_lord = get_nakshatra_lord(male_ketu['nakshatra'])

    # Female chart analysis
    female_moon = female_chart_data['Moon']
    female_moon_rasi = female_moon['rasi']
    female_moon_nakshatra = female_moon['nakshatra']
    female_lagna_rasi = female_chart_data['Ascendant']['rasi']
    female_lagna_lord = rasi_lords[female_lagna_rasi]
    female_lagna_pada = female_chart_data['Ascendant']['pada']

    # Get planets in female's lagna (1st house) and rasi (moon sign house)
    planets_in_female_lagna = get_planets_in_house(female_chart_data, female_asc, 1)
    planets_in_female_rasi = get_planets_in_rasi(female_chart_data, female_moon_rasi)

    # Conditions to check
    conditions = {
        'Female Rasi (Moon Sign)': female_moon_rasi,
        'Female Nakshatra': female_moon_nakshatra,
        'Female Lagna Lord': female_lagna_lord,
        'Female Lagna Pada': f"Pada {female_lagna_pada}",
        'Planets in Female Lagna': ", ".join(planets_in_female_lagna) if planets_in_female_lagna else "None",
        'Planets in Female Rasi': ", ".join(planets_in_female_rasi) if planets_in_female_rasi else "None"
    }

    # Check matches with Rahu Nakshatra Lord
    rahu_matches = []
    ketu_matches = []

    # Check each condition against Rahu Nakshatra Lord
    if rahu_nakshatra_lord == rasi_lords.get(female_moon_rasi):
        rahu_matches.append('Female Rasi (Moon Sign)')
    if rahu_nakshatra_lord == get_nakshatra_lord(female_moon_nakshatra):
        rahu_matches.append('Female Nakshatra')
    if rahu_nakshatra_lord == female_lagna_lord:
        rahu_matches.append('Female Lagna Lord')
    if rahu_nakshatra_lord in planets_in_female_lagna:
        rahu_matches.append('Planets in Female Lagna')
    if rahu_nakshatra_lord in planets_in_female_rasi:
        rahu_matches.append('Planets in Female Rasi')

    # If no Rahu matches, check with Ketu Nakshatra Lord
    if not rahu_matches:
        if ketu_nakshatra_lord == rasi_lords.get(female_moon_rasi):
            ketu_matches.append('Female Rasi (Moon Sign)')
        if ketu_nakshatra_lord == get_nakshatra_lord(female_moon_nakshatra):
            ketu_matches.append('Female Nakshatra')
        if ketu_nakshatra_lord == female_lagna_lord:
            ketu_matches.append('Female Lagna Lord')
        if ketu_nakshatra_lord in planets_in_female_lagna:
            ketu_matches.append('Planets in Female Lagna')
        if ketu_nakshatra_lord in planets_in_female_rasi:
            ketu_matches.append('Planets in Female Rasi')

    return {
        'male_rahu_nakshatra': male_rahu['nakshatra'],
        'male_ketu_nakshatra': male_ketu['nakshatra'],
        'rahu_nakshatra_lord': rahu_nakshatra_lord,
        'ketu_nakshatra_lord': ketu_nakshatra_lord,
        'conditions': conditions,
        'rahu_matches': rahu_matches,
        'ketu_matches': ketu_matches,
        'total_matches': len(rahu_matches) + len(ketu_matches),
        'primary_match_type': 'Rahu' if rahu_matches else 'Ketu' if ketu_matches else 'None'
    }

def display_compatibility_table(prediction_result):
    """Display the compatibility results in a nice HTML table"""

    # Prepare data for the table
    table_data = []
    conditions = prediction_result['conditions']
    rahu_matches = prediction_result['rahu_matches']
    ketu_matches = prediction_result['ketu_matches']

    for condition, value in conditions.items():
        rahu_match = condition in rahu_matches
        ketu_match = condition in ketu_matches
        match_type = "Rahu" if rahu_match else "Ketu" if ketu_match else "No Match"

        table_data.append({
            'Condition': condition,
            'Female Chart Value': value,
            'Match Type': match_type,
            'Status': '✓' if (rahu_match or ketu_match) else '✗'
        })

    # Create DataFrame
    df = pd.DataFrame(table_data)

    # Create HTML table with styling
    html_table = """
    <style>
    .compatibility-table {
        border-collapse: collapse;
        width: 100%;
        margin: 20px 0;
        font-family: Arial, sans-serif;
    }
    .compatibility-table th, .compatibility-table td {
        border: 1px solid #ddd;
        padding: 12px;
        text-align: left;
    }
    .compatibility-table th {
        background-color: #4CAF50;
        color: white;
        font-weight: bold;
    }
    .match-row {
        background-color: #d4edda !important;
        color: #155724;
        font-weight: bold;
    }
    .no-match-row {
        background-color: #f8f9fa;
    }
    .summary-box {
        background-color: #e7f3ff;
        border: 2px solid #b3d9ff;
        border-radius: 8px;
        padding: 15px;
        margin: 20px 0;
        font-family: Arial, sans-serif;
    }
    </style>
    """

    html_table += f"""
    <div class="summary-box">
        <h3>🔮 Life Partner Compatibility Analysis</h3>
        <p><strong>Male Rahu Nakshatra:</strong> {prediction_result['male_rahu_nakshatra']} (Lord: {prediction_result['rahu_nakshatra_lord']})</p>
        <p><strong>Male Ketu Nakshatra:</strong> {prediction_result['male_ketu_nakshatra']} (Lord: {prediction_result['ketu_nakshatra_lord']})</p>
        <p><strong>Total Matches Found:</strong> {prediction_result['total_matches']}</p>
        <p><strong>Primary Match Type:</strong> {prediction_result['primary_match_type']}</p>
    </div>
    """

    html_table += '<table class="compatibility-table">'
    html_table += '<tr><th>Condition</th><th>Female Chart Value</th><th>Match Type</th><th>Status</th></tr>'

    for _, row in df.iterrows():
        row_class = "match-row" if row['Status'] == '✓' else "no-match-row"
        html_table += f'<tr class="{row_class}">'
        html_table += f'<td>{row["Condition"]}</td>'
        html_table += f'<td>{row["Female Chart Value"]}</td>'
        html_table += f'<td>{row["Match Type"]}</td>'
        html_table += f'<td>{row["Status"]}</td>'
        html_table += '</tr>'

    html_table += '</table>'

    return html_table

def create_birth_chart(dob, tob, lat, lon, tz_offset=5.5):
    """Create birth chart from birth details"""
    local_dt = datetime.datetime.strptime(f"{dob} {tob}", "%Y-%m-%d %H:%M")
    utc_dt = local_dt - datetime.timedelta(hours=tz_offset)
    jd = swe.julday(utc_dt.year, utc_dt.month, utc_dt.day, utc_dt.hour + utc_dt.minute/60.0)

    planet_data, asc_deg, cusps = get_planet_positions(jd, lat, lon)
    return planet_data, asc_deg

def main_life_partner_analysis():
    """Main function to run the life partner prediction"""

    print("🕉️ VEDIC LIFE PARTNER PREDICTION SYSTEM")
    print("=" * 50)

    # Sample Male Chart (you can modify these)
    male_dob = "1978-09-18"
    male_tob = "17:35"
    male_lat = 13.08333333
    male_lon = 80.28333333

    # Sample Female Chart (you can modify these)
    female_dob = "1984-01-15"
    female_tob = "13:30"
    female_lat = 11.9416
    female_lon = 79.8083

    print(f"Male Birth Details: {male_dob} at {male_tob}")
    print(f"Female Birth Details: {female_dob} at {female_tob}")
    print()

    # Generate charts
    male_chart, male_asc = create_birth_chart(male_dob, male_tob, male_lat, male_lon)
    female_chart, female_asc = create_birth_chart(female_dob, female_tob, female_lat, female_lon)

    # Run compatibility analysis
    result = life_partner_prediction(male_chart, female_chart, male_asc, female_asc)

    # Display results
    html_output = display_compatibility_table(result)
    display(HTML(html_output))

    # Compatibility verdict
    if result['total_matches'] >= 3:
        verdict = "🟢 HIGHLY COMPATIBLE - Strong life partner potential!"
    elif result['total_matches'] >= 1:
        verdict = "🟡 MODERATELY COMPATIBLE - Some positive indications."
    else:
        verdict = "🔴 LOW COMPATIBILITY - Consider other factors."

    print(f"\n{verdict}")
    print(f"Matches found through: {result['primary_match_type']} influence")

    return result

# Run the analysis
if __name__ == "__main__":
    result = main_life_partner_analysis()